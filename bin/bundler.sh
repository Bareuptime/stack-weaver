#!/bin/bash
# =============================================================================
# CLUSTER FORGE BUNDLER
# Combines all modular scripts into a single executable
# =============================================================================

set -euo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
OUTPUT_FILE="${1:-cluster-forge-bundled.sh}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $*"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

log_info "Starting Cluster Forge bundler..."
log_info "Project root: $PROJECT_ROOT"
log_info "Output file: $OUTPUT_FILE"

# Check if all required files exist
required_files=(
    "lib/logging.sh"
    "lib/system_core.sh"
    "bin/setup_service_mesh.sh"
    "bin/configure_client_service_mesh.sh"
    "bin/cluster-forge.sh"
)

missing_files=()
for file in "${required_files[@]}"; do
    if [[ ! -f "$PROJECT_ROOT/$file" ]]; then
        missing_files+=("$file")
    fi
done

if [[ ${#missing_files[@]} -gt 0 ]]; then
    log_error "Missing required files:"
    for file in "${missing_files[@]}"; do
        log_error "  - $file"
    done
    exit 1
fi

log_info "All required files found"

# Create the bundled script
cat > "$OUTPUT_FILE" << 'EOF_HEADER'
#!/bin/bash
# =============================================================================
# CLUSTER FORGE - BUNDLED VERSION
# Generated by bundler.sh - DO NOT EDIT MANUALLY
# =============================================================================

set -euo pipefail
IFS=$'\n\t'

# Mark as bundled
export BUNDLED=1

EOF_HEADER

log_info "Adding header..."

# Add logging functions
log_info "Bundling logging.sh..."
cat >> "$OUTPUT_FILE" << 'EOF_LOGGING_COMMENT'
# =============================================================================
# LOGGING FUNCTIONS (from lib/logging.sh)
# =============================================================================

EOF_LOGGING_COMMENT

# Extract just the function definitions from logging.sh (skip shebang and exports)
grep -v '^#!/' "$PROJECT_ROOT/lib/logging.sh" | grep -v '^export' >> "$OUTPUT_FILE"

# Add system core functions
log_info "Bundling system_core.sh..."
cat >> "$OUTPUT_FILE" << 'EOF_CORE_COMMENT'

# =============================================================================
# SYSTEM CORE FUNCTIONS (from lib/system_core.sh)
# =============================================================================

EOF_CORE_COMMENT

# Extract function definitions from system_core.sh (skip shebang and comments)
grep -v '^#!/' "$PROJECT_ROOT/lib/system_core.sh" | grep -v '^# =============================================================================\|^# SYSTEM CORE FUNCTIONS' >> "$OUTPUT_FILE"

# Add service mesh setup functions
log_info "Bundling setup_service_mesh.sh..."
cat >> "$OUTPUT_FILE" << 'EOF_SETUP_COMMENT'

# =============================================================================
# SERVICE MESH SETUP FUNCTIONS (from bin/setup_service_mesh.sh)
# =============================================================================

EOF_SETUP_COMMENT

# Extract function definitions from setup_service_mesh.sh (skip shebang, set commands, and initial comments)
sed -e '1,/^# =============================================================================$/d' \
    -e '/^ROLE=\|^NOMAD_SERVER_IP=\|^CONSUL_SERVER_IP=\|^NODE_NAME=\|^DATACENTER=\|^ENCRYPT_KEY=\|^NETMAKER_TOKEN=\|^STATIC_PORT=\|^CONSUL_AGENT_TOKEN=\|^VAULT_ADDR=\|^VAULT_TOKEN=/d' \
    -e '/^error()/,/^}$/d' \
    -e '/^validate_input()/,/^}$/d' \
    -e '/^# Run main function$/,$d' \
    "$PROJECT_ROOT/bin/setup_service_mesh.sh" >> "$OUTPUT_FILE"

# Add client configuration functions
log_info "Bundling configure_client_service_mesh.sh..."
cat >> "$OUTPUT_FILE" << 'EOF_CLIENT_COMMENT'

# =============================================================================
# CLIENT CONFIGURATION FUNCTIONS (from bin/configure_client_service_mesh.sh)
# =============================================================================

EOF_CLIENT_COMMENT

# Extract function definitions from configure_client_service_mesh.sh (skip shebang, set commands, and initial comments)
sed -e '1,/^# =============================================================================$/d' \
    -e '/^ROLE=\|^NOMAD_SERVER_IP=\|^CONSUL_SERVER_IP=\|^NODE_NAME=\|^DATACENTER=\|^ENCRYPT_KEY=\|^NETMAKER_TOKEN=\|^STATIC_PORT=\|^CONSUL_AGENT_TOKEN=\|^VAULT_ADDR=\|^VAULT_TOKEN=/d' \
    -e '/^error()/,/^}$/d' \
    -e '/^validate_input()/,/^}$/d' \
    -e '/^# Run main function$/,$d' \
    "$PROJECT_ROOT/bin/configure_client_service_mesh.sh" >> "$OUTPUT_FILE"

# Add main execution logic
log_info "Bundling main execution logic from cluster-forge.sh..."
cat >> "$OUTPUT_FILE" << 'EOF_MAIN_COMMENT'

# =============================================================================
# MAIN EXECUTION LOGIC (from bin/cluster-forge.sh)
# =============================================================================

EOF_MAIN_COMMENT

# Extract main logic from cluster-forge.sh (skip shebang, set commands, bundled check, and sourcing)
sed -e '1,/^# =============================================================================$/d' \
    -e '/^if \[\[ -z "\${BUNDLED:-}" \]\]; then/,/^fi$/d' \
    -e '/^source_modules()/,/^}$/d' \
    -e '/source_modules$/d' \
    "$PROJECT_ROOT/bin/cluster-forge.sh" >> "$OUTPUT_FILE"

# Make the bundled script executable
chmod +x "$OUTPUT_FILE"

log_info "Bundle created successfully: $OUTPUT_FILE"
log_info ""
log_info "Usage examples:"
log_info "  # Validate configuration only"
log_info "  NETMAKER_TOKEN='xyz' NOMAD_SERVER_IP='10.0.1.10' CONSUL_SERVER_IP='10.0.1.10' \\"
log_info "  CONSUL_AGENT_TOKEN='abc' VAULT_ADDR='https://vault:8200' VAULT_TOKEN='def' \\"
log_info "  ./$OUTPUT_FILE --validate-only"
log_info ""
log_info "  # Run full deployment"
log_info "  sudo NETMAKER_TOKEN='xyz' NOMAD_SERVER_IP='10.0.1.10' CONSUL_SERVER_IP='10.0.1.10' \\"
log_info "  CONSUL_AGENT_TOKEN='abc' VAULT_ADDR='https://vault:8200' VAULT_TOKEN='def' \\"
log_info "  ./$OUTPUT_FILE"
log_info ""
log_info "  # Show help"
log_info "  ./$OUTPUT_FILE --help"

# Verify the bundled script
log_info "Verifying bundled script..."
if bash -n "$OUTPUT_FILE"; then
    log_info "✓ Syntax check passed"
else
    log_error "✗ Syntax check failed"
    exit 1
fi

# Show file size
file_size=$(wc -c < "$OUTPUT_FILE")
log_info "Bundle size: $file_size bytes"
log_info "Bundling completed successfully!"
