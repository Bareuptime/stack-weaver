#!/bin/bash
# =============================================================================
# CLUSTER FORGE - BUNDLED VERSION
# Generated by bundler.sh - DO NOT EDIT MANUALLY
# =============================================================================

set -euo pipefail
IFS=$'\n\t'

# Mark as bundled
export BUNDLED=1

# =============================================================================
# LOGGING FUNCTIONS (from lib/logging.sh)
# =============================================================================


# ========== Configurable Options ==========
LOG_TIMESTAMP_FORMAT="%Y-%m-%d %H:%M:%S"
LOG_LEVEL="${LOG_LEVEL:-DEBUG}"  # Set to DEBUG, INFO, WARN, ERROR, etc.
NO_COLOR="${NO_COLOR:-0}"        # Set to 1 to disable color output

# ========== Colors ==========
if [[ "$NO_COLOR" -eq 1 ]]; then
  RED=''; GREEN=''; YELLOW=''; BLUE=''; PURPLE=''; CYAN=''; NC=''
else
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  BLUE='\033[0;34m'
  PURPLE='\033[0;35m'
  CYAN='\033[0;36m'
  NC='\033[0m'
fi

# ========== Internal ==========
_log_ts() {
  date +"$LOG_TIMESTAMP_FORMAT"
}

_log() {
  local level="$1"
  local color="$2"
  shift 2
  echo -e "${color}[$(_log_ts)] [$level]${NC} $*" >&2
}

# ========== Log Functions ==========

log_info()     { [[ "$LOG_LEVEL" =~ INFO|DEBUG|TRACE ]] && _log "INFO"    "$GREEN"  "$@"; }
log_warn()     { [[ "$LOG_LEVEL" =~ WARN|INFO|DEBUG|TRACE ]] && _log "WARN"    "$YELLOW" "$@"; }
log_error()    { [[ "$LOG_LEVEL" =~ ERROR|WARN|INFO|DEBUG|TRACE ]] && _log "ERROR"   "$RED"    "$@"; }
log_debug()    { [[ "$LOG_LEVEL" =~ DEBUG|TRACE ]] && _log "DEBUG"   "$BLUE"   "$@"; }
log_trace()    { [[ "$LOG_LEVEL" =~ TRACE ]] && _log "TRACE"   "$CYAN"   "$@"; }
log_success()  { [[ "$LOG_LEVEL" =~ INFO|DEBUG|TRACE ]] && _log "SUCCESS" "$GREEN"  "$@"; }
log_fatal()    { _log "FATAL" "$RED" "$@"; exit 1; }
log_start()    { [[ "$LOG_LEVEL" =~ INFO|DEBUG|TRACE ]] && _log "START"   "$YELLOW" "$@"; }
log_note()     { [[ "$LOG_LEVEL" =~ INFO|DEBUG|TRACE ]] && _log "NOTE"    "$PURPLE" "$@"; }

# =============================================================================
# SYSTEM CORE FUNCTIONS (from lib/system_core.sh)
# =============================================================================

# Core system preparation, docker, dns, firewall, and infrastructure setup

# SYSTEM PREPARATION

prepare_system() {
    log_info "Preparing system for $ROLE node..."
    
    # Update system
    apt-get update -y
    apt-get upgrade -y
    
    # Install required packages
    apt-get install -y \
        curl wget unzip jq apt-transport-https ca-certificates \
        gnupg lsb-release software-properties-common ufw dnsmasq
    
    # Create directories
    mkdir -p /opt/{nomad,consul}
    mkdir -p /etc/{nomad.d,consul.d}
    mkdir -p /var/log/{nomad,consul}
    
    # Create users
    useradd --system --home /etc/nomad.d --shell /bin/false nomad 2>/dev/null || true
    useradd --system --home /etc/consul.d --shell /bin/false consul 2>/dev/null || true
    
    # Set ownership
    chown -R nomad:nomad /opt/nomad /etc/nomad.d /var/log/nomad
    chown -R consul:consul /opt/consul /etc/consul.d /var/log/consul
    
    log_info "System preparation completed"
}

# NETMAKER CLIENT INSTALLATION

validate_netclient() {
    log_info "Validating existing Netmaker client installation..."
    
    # Check if netclient binary exists and is executable
    local netclient_paths=(
        "/usr/local/bin/netclient"
        "/usr/bin/netclient"
        "/opt/netclient/netclient"
        "$(which netclient 2>/dev/null)"
    )
    
    local netclient_found=false
    local netclient_path=""
    
    for path in "${netclient_paths[@]}"; do
        if [[ -n "$path" && -x "$path" ]]; then
            netclient_found=true
            netclient_path="$path"
            break
        fi
    done
    
    # Also try command -v as fallback
    if [[ "$netclient_found" == false ]] && command -v netclient &> /dev/null; then
        netclient_found=true
        netclient_path=$(command -v netclient)
    fi
    
    if [[ "$netclient_found" == false ]]; then
        log_info "Netclient binary not found in PATH or common locations"
        return 1
    fi
    
    log_info "Found netclient at: $netclient_path"
    
    # Check if netclient service is running
    if ! systemctl is-active --quiet netclient 2>/dev/null; then
        log_info "Netclient service is not running"
        return 1
    fi
    
    # Verify netclient is functional by checking its status
    if ! "$netclient_path" list &> /dev/null; then
        log_info "Netclient binary exists but is not functional"
        return 1
    fi
    
    # Check if port is in use (indicating WireGuard is active)
    if ! netstat -tuln 2>/dev/null | grep -q ":$STATIC_PORT " && ! ss -tuln 2>/dev/null | grep -q ":$STATIC_PORT "; then
        log_info "Port $STATIC_PORT is not in use (WireGuard may not be active)"
        return 1
    fi
    
    # Check if netmaker interface exists and has an IP
    local netmaker_interface=$(ip link show | grep -o -E "(nm-[^:]*|netmaker)" | head -1)
    if [[ -z "$netmaker_interface" ]]; then
        log_info "No Netmaker interface found (no nm-* or netmaker interface)"
        return 1
    fi
    
    # Check if the interface has an IP address
    local netmaker_ip=$(ip addr show "$netmaker_interface" 2>/dev/null | grep -oP 'inet \K[0-9.]+' | head -1)
    if [[ -z "$netmaker_ip" ]]; then
        log_info "Netmaker interface $netmaker_interface has no IP address"
        return 1
    fi
    
    # Test connectivity through the interface
    if ! ping -c 1 -W 3 "$netmaker_ip" >/dev/null 2>&1; then
        log_info "Connectivity test failed for Netmaker IP: $netmaker_ip"
        return 1
    fi
    
    # If we get here, netclient is working properly
    log_info "✓ Netclient is already installed and working"
    log_info "  • Interface: $netmaker_interface"
    log_info "  • IP: $netmaker_ip"
    log_info "  • Port: $STATIC_PORT"
    log_info "  • Service: active"
    
    # Export the IP for use in other functions
    export NETMAKER_IP="$netmaker_ip"
    
    return 0
}

install_netclient() {
    log_info "Installing Netmaker client..."
    
    # Download and install netclient
    wget -O /tmp/netclient https://fileserver.netmaker.io/releases/download/v1.0.0/netclient-linux-amd64
    chmod +x /tmp/netclient
    /tmp/netclient install
    
    log_info "Netclient installed successfully"
}

join_netmaker_network() {
    log_info "Joining Netmaker network..."
    
    # Get the main bridge IP (usually the default route interface)
    local endpoint_ip=$(ip route get 8.8.8.8 | grep -oP 'src \K\S+' | head -1)
    log_info "Detected endpoint IP: $endpoint_ip"
    
    # Join the network with static port
    netclient join -t "$NETMAKER_TOKEN" \
        --static-port -p "$STATIC_PORT" \
        -s true \
        --endpoint-ip "$endpoint_ip"
    
    # Wait for network interface to be ready
    log_info "Waiting for Netmaker interface to be ready..."
    local attempts=0
    local netmaker_ip=""
    
    while [[ $attempts -lt 30 ]]; do
        # Look for netmaker interface (usually starts with nm-)
        netmaker_ip=$(ip addr show | grep -A 1 "nm-" | grep -oP 'inet \K[0-9.]+' | head -1 || echo "")
        if [[ -n "$netmaker_ip" ]]; then
            log_info "Netmaker interface ready with IP: $netmaker_ip"
            break
        fi
        sleep 2
        ((attempts++))
    done
    
    if [[ -z "$netmaker_ip" ]]; then
        log_error "Failed to detect Netmaker interface IP after 60 seconds"
        return 1
    fi
    
    # Export for use in other functions
    export NETMAKER_IP="$netmaker_ip"
    
    log_info "Successfully joined Netmaker network with IP: $netmaker_ip"
}

setup_netmaker() {
    log_info "Setting up Netmaker client..."
    
    # First, validate if netclient is already working
    if validate_netclient; then
        log_info "Netclient is already installed and working - skipping installation"
        return 0
    fi
    
    # If validation failed, proceed with installation
    log_info "Netclient validation failed - proceeding with installation"
    install_netclient
    join_netmaker_network
}

# DNS CONFIGURATION

disable_systemd_resolved() {
    log_info "Disabling systemd-resolved to let dnsmasq handle DNS..."
    
    # Check if systemd-resolved is active and disable it completely
    if systemctl is-active --quiet systemd-resolved; then
        log_info "systemd-resolved is active, disabling it completely..."
        
        # Stop and disable systemd-resolved
        systemctl stop systemd-resolved
        systemctl disable systemd-resolved
        
        log_info "systemd-resolved stopped and disabled"
    else
        log_info "systemd-resolved is not active"
    fi
    
    log_info "DNS will be handled entirely by dnsmasq"
}

configure_dnsmasq() {
    log_info "Configuring dnsmasq for Consul DNS..."
    
    # Get network interfaces
    local netmaker_ip="${NETMAKER_IP}"
    
    # Stop dnsmasq if running
    systemctl stop dnsmasq 2>/dev/null || true
    
    # Create dnsmasq configuration directory
    mkdir -p /etc/dnsmasq.d
    
    # Wait for Docker bridge to be available (since we just installed Docker)
    log_info "Waiting for Docker bridge to be available..."
    local attempts=0
    local docker_ip=""
    while [[ $attempts -lt 30 ]]; do
        if ip addr show docker0 >/dev/null 2>&1; then
            docker_ip=$(ip addr show docker0 | grep -oP 'inet \K[0-9.]+' | head -1)
            if [[ -n "$docker_ip" ]]; then
                log_info "Docker bridge ready at: $docker_ip"
                break
            fi
        fi
        sleep 2
        ((attempts++))
    done
    
    if [[ -z "$docker_ip" ]]; then
        log_error "Docker bridge not available after 60 seconds. Docker installation failed or Docker service is not running."
        return 1
    fi
    
    # Create ONLY the 10-consul file - don't touch any other DNS configs
    log_info "Creating /etc/dnsmasq.d/10-consul configuration..."
    cat > /etc/dnsmasq.d/10-consul << EOF
# Forward .service.consul queries to Consul DNS
server=/service.consul/${CONSUL_SERVER_IP}#8600
server=/consul/${CONSUL_SERVER_IP}#8600

# Use Google DNS for other queries
server=8.8.8.8
server=1.1.1.1

# Listen on standard DNS port 53
listen-address=127.0.0.1
listen-address=${docker_ip}
listen-address=${netmaker_ip}

port=53

# Bind only to the interfaces we're listening on
bind-interfaces

# Cache settings
cache-size=1000
EOF
    
    log_info "Created /etc/dnsmasq.d/10-consul with:"
    log_info "  • Consul DNS: ${CONSUL_SERVER_IP}:8600"
    log_info "  • Listen addresses: 127.0.0.1, ${docker_ip}, ${netmaker_ip}"
    
    # Start and enable dnsmasq
    systemctl enable dnsmasq
    systemctl start dnsmasq
    
    # Verify dnsmasq is running
    if systemctl is-active --quiet dnsmasq; then
        log_info "✓ dnsmasq configured and running"
        log_info "DNS listeners: 127.0.0.1:53, ${docker_ip}:53, ${netmaker_ip}:53"
        log_info "Consul DNS: Forwarding .service.consul queries to ${CONSUL_SERVER_IP}:8600"
    else
        log_error "Failed to start dnsmasq"
        return 1
    fi
}

reload_dns_services() {
    log_info "Reloading DNS-related services..."
    
    # Reload systemd
    systemctl daemon-reload
    
    # Restart dnsmasq to ensure it picks up all changes
    systemctl restart dnsmasq
    
    # Wait a moment for services to stabilize
    sleep 3
    
    # Test DNS resolution
    if nslookup google.com 127.0.0.1 >/dev/null 2>&1; then
        log_info "✓ DNS resolution test passed"
    else
        log_warn "⚠ Warning: DNS resolution test failed"
    fi
    
    log_info "DNS services reloaded"
}

# FIREWALL CONFIGURATION

configure_firewall() {
    log_info "Configuring firewall..."
    
    # Reset UFW
    ufw --force reset
    
    # Default policies
    ufw default deny incoming
    ufw default allow outgoing
    
    # SSH
    ufw allow 22/tcp
    
    # Netmaker/WireGuard
    ufw allow "$STATIC_PORT"/udp comment "Netmaker WireGuard"
    
    # Nomad
    ufw allow 4646/tcp  # HTTP API
    ufw allow 4647/tcp  # RPC
    ufw allow 4648/tcp  # Serf WAN
    
    # Consul
    ufw allow 8300/tcp  # Server RPC
    ufw allow 8301/tcp  # Serf LAN
    ufw allow 8301/udp  # Serf LAN
    ufw allow 8302/tcp  # Serf WAN
    ufw allow 8302/udp  # Serf WAN
    ufw allow 8500/tcp  # HTTP API
    ufw allow 8600/tcp  # DNS
    ufw allow 8600/udp  # DNS
    
    # DNS
    ufw allow 53/tcp    # DNS TCP
    ufw allow 53/udp    # DNS UDP
    
    # Enable firewall
    ufw --force enable
    
    log_info "Firewall configuration completed"
}

# DOCKER INSTALLATION

install_docker() {
    log_info "Installing Docker..."
    
    # Detect OS
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$ID
        VERSION_CODENAME=$VERSION_CODENAME
    else
        log_error "Cannot detect OS. /etc/os-release not found."
        return 1
    fi
    
    log_info "Detected OS: $OS $VERSION_CODENAME"
    
    # Clean up any existing Docker repositories and keys
    log_info "Cleaning up existing Docker repositories..."
    rm -f /etc/apt/sources.list.d/docker.list
    rm -f /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Add Docker's official GPG key
    install -m 0755 -d /etc/apt/keyrings
    
    # Use appropriate GPG key and repository based on OS
    if [[ "$OS" == "ubuntu" ]]; then
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $VERSION_CODENAME stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    elif [[ "$OS" == "debian" ]]; then
        curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $VERSION_CODENAME stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    else
        log_error "Unsupported OS: $OS. This script supports Ubuntu and Debian only."
        return 1
    fi
    
    # Install Docker
    apt-get update -y
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # Configure Docker daemon
    cat > /etc/docker/daemon.json << 'EOF'
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "storage-driver": "overlay2"
}
EOF

    # Start Docker and add nomad user to docker group
    systemctl enable docker
    systemctl start docker
    usermod -aG docker nomad
    
    log_info "Docker installation completed"
}

# INSTALL HASHICORP TOOLS

validate_hashicorp_tools() {
    log_info "Validating existing Nomad, Consul, and Vault installations..."
    
    local nomad_installed=false
    local consul_installed=false
    local vault_installed=false
    
    # Check if Nomad is installed and functional
    if command -v nomad &> /dev/null; then
        if nomad version &> /dev/null; then
            local nomad_ver=$(nomad version | head -1)
            log_info "✓ Nomad is already installed: $nomad_ver"
            nomad_installed=true
        else
            log_info "Nomad binary found but not functional"
        fi
    else
        log_info "Nomad not found in PATH"
    fi
    
    # Check if Consul is installed and functional
    if command -v consul &> /dev/null; then
        if consul version &> /dev/null; then
            local consul_ver=$(consul version | head -1)
            log_info "✓ Consul is already installed: $consul_ver"
            consul_installed=true
        else
            log_info "Consul binary found but not functional"
        fi
    else
        log_info "Consul not found in PATH"
    fi
    
    # Check if Vault is installed and functional
    if command -v vault &> /dev/null; then
        if vault version &> /dev/null; then
            local vault_ver=$(vault version | head -1)
            log_info "✓ Vault is already installed: $vault_ver"
            vault_installed=true
        else
            log_info "Vault binary found but not functional"
        fi
    else
        log_info "Vault not found in PATH"
    fi
    
    # Return status: 0 if all installed, 1 if none, 2 if partial
    if [[ "$nomad_installed" == true && "$consul_installed" == true && "$vault_installed" == true ]]; then
        return 0  # All installed
    elif [[ "$nomad_installed" == false && "$consul_installed" == false && "$vault_installed" == false ]]; then
        return 1  # None installed
    else
        return 2  # Partial installation
    fi
}

install_hashicorp_tools() {
    log_info "Checking HashiCorp tools installation status..."
    
    # Validate existing installations
    if validate_hashicorp_tools; then
        log_info "All HashiCorp tools are already installed and functional - skipping installation"
        return 0
    fi
    
    local validation_result=$?
    if [[ $validation_result -eq 2 ]]; then
        log_info "Partial installation detected - proceeding with full installation to ensure consistency"
    else
        log_info "HashiCorp tools not found - proceeding with installation"
    fi
    
    log_info "Installing Nomad, Consul, and Vault..."
    
    # Check if HashiCorp repository is already configured
    if [[ ! -f /etc/apt/sources.list.d/hashicorp.list ]]; then
        log_info "Adding HashiCorp repository..."
        # Add HashiCorp's official GPG key and repository
        wget -q -O - https://apt.releases.hashicorp.com/gpg | gpg --dearmor --batch --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(. /etc/os-release && echo $VERSION_CODENAME) main" | tee /etc/apt/sources.list.d/hashicorp.list
    else
        log_info "HashiCorp repository already configured"
    fi
    
    # Update and install
    apt-get update -y
    apt-get install -y nomad consul vault
    
    # Verify installations
    if nomad version &> /dev/null && consul version &> /dev/null && vault version &> /dev/null; then
        local nomad_ver=$(nomad version | head -1)
        local consul_ver=$(consul version | head -1)
        local vault_ver=$(vault version | head -1)
        log_info "✓ Installation successful:"
        log_info "  • $nomad_ver"
        log_info "  • $consul_ver"
        log_info "  • $vault_ver"
    else
        log_error "Installation verification failed - one or more tools are not working"
        return 1
    fi
    
    log_info "HashiCorp tools installation completed"
}

# SERVICE MANAGEMENT

start_services() {
    log_info "Starting services..."
    
    # Stop any existing services
    systemctl stop consul nomad 2>/dev/null || true
    
    # Reload systemd
    systemctl daemon-reload
    
    # Start and enable Consul first
    systemctl enable consul
    log_info "Starting Consul with timeout..."
    if timeout 30 systemctl start consul; then
        log_info "Consul start command completed"
    else
        log_warn "Warning: Consul start command timed out, checking status..."
    fi
    
    # Check Consul status
    if systemctl is-active --quiet consul; then
        log_info "✓ Consul service is active"
    else
        log_error "✗ Consul service failed to start"
        systemctl status consul --no-pager -l
        return 1
    fi
    
    # Wait for Consul to be ready
    log_info "Waiting for Consul to be ready..."
    local attempts=0
    while [[ $attempts -lt 30 ]]; do
        if curl -s http://127.0.0.1:8500/v1/status/leader >/dev/null 2>&1; then
            log_info "Consul is ready"
            break
        fi
        sleep 2
        ((attempts++))
    done
    
    # Start and enable Nomad
    systemctl enable nomad
    log_info "Starting Nomad with timeout..."
    if timeout 30 systemctl start nomad; then
        log_info "Nomad start command completed"
    else
        log_warn "Warning: Nomad start command timed out, checking status..."
    fi
    
    # Check Nomad status
    if systemctl is-active --quiet nomad; then
        log_info "✓ Nomad service is active"
    else
        log_error "✗ Nomad service failed to start"
        systemctl status nomad --no-pager -l
        return 1
    fi
    
    # Wait for Nomad to be ready
    log_info "Waiting for Nomad to be ready..."
    attempts=0
    while [[ $attempts -lt 30 ]]; do
        if curl -s http://127.0.0.1:4646/v1/status/leader >/dev/null 2>&1; then
            log_info "Nomad is ready"
            break
        fi
        sleep 2
        ((attempts++))
    done
    
    log_info "Services started successfully"
}

# VALIDATION

validate_installation() {
    log_info "Validating installation..."
    
    local errors=0
    
    # Check service status
    for service in consul nomad docker dnsmasq; do
        if systemctl is-active --quiet $service; then
            log_info "✓ $service is running"
        else
            log_error "✗ $service is not running"
            ((errors++))
        fi
    done
    
    # Check Netmaker connectivity
    if [[ -n "${NETMAKER_IP:-}" ]]; then
        if ping -c 1 -W 3 "$NETMAKER_IP" >/dev/null 2>&1; then
            log_info "✓ Netmaker network connectivity ($NETMAKER_IP)"
        else
            log_error "✗ Netmaker network connectivity failed"
            ((errors++))
        fi
    fi
    
    # Check API endpoints
    if curl -s "http://127.0.0.1:8500/v1/status/leader" >/dev/null 2>&1; then
        log_info "✓ Consul API is responding"
    else
        log_error "✗ Consul API is not responding"
        ((errors++))
    fi
    
    if curl -s "http://127.0.0.1:4646/v1/status/leader" >/dev/null 2>&1; then
        log_info "✓ Nomad API is responding"
    else
        log_error "✗ Nomad API is not responding"
        ((errors++))
    fi
    
    # Check Docker
    if docker info >/dev/null 2>&1; then
        log_info "✓ Docker is functional"
    else
        log_error "✗ Docker is not functional"
        ((errors++))
    fi
    
    # Check DNS resolution
    if nslookup google.com 127.0.0.1 >/dev/null 2>&1; then
        log_info "✓ DNS resolution is working"
    else
        log_error "✗ DNS resolution failed"
        ((errors++))
    fi
    
    if [[ $errors -eq 0 ]]; then
        log_info "✓ All validations passed!"
        return 0
    else
        log_error "✗ Validation failed with $errors errors"
        return 1
    fi
}

# =============================================================================
# SERVICE MESH SETUP FUNCTIONS (from bin/setup_service_mesh.sh)
# =============================================================================

# SERVICE MESH SETUP MODULE
# Handles Nomad/Consul/Vault service mesh configuration
# =============================================================================

# =============================================================================
# SERVICE MESH SETUP FUNCTION
# =============================================================================

setup_service_mesh() {
    log_info "Setting up service mesh configuration..."
    
    # This function will be implemented to handle:
    # - Consul server/client configuration
    # - Nomad server/client configuration 
    # - Vault integration
    # - Certificate management
    # - Service mesh connectivity
    
    log_info "Service mesh setup completed (placeholder)"
}

# The rest of the existing content from setup_service_mesh.sh follows below...
# This allows the existing functions to still work while providing the main entry point

# Complete Vault-Based Node Bootstrap Script
# This script sets up a new node with automatic certificate management using Vault PKI

set -e


ROLE="${ROLE:-client}"                    # server or client
NOMAD_SERVER_IP="${NOMAD_SERVER_IP:-}"    # IP of the server node
CONSUL_SERVER_IP="${CONSUL_SERVER_IP:-}"    # IP of the server node
NODE_NAME="${NODE_NAME:-$(hostname)}"     # Node name
DATACENTER="${DATACENTER:-dc1}"           # Datacenter name
ENCRYPT_KEY="${ENCRYPT_KEY:-}"            # Consul encryption key (auto-generated if empty)
NETMAKER_TOKEN="${NETMAKER_TOKEN:-}"      # Netmaker enrollment token (mandatory)
STATIC_PORT="${STATIC_PORT:-51821}"       # Netmaker static port
CONSUL_AGENT_TOKEN="${CONSUL_AGENT_TOKEN:-}"  # Consul agent token (mandatory)
VAULT_ADDR="${VAULT_ADDR:-}"
VAULT_TOKEN="${VAULT_TOKEN:-}"



# =============================================================================
# VALIDATION
# =============================================================================



log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

create_service_directories() {
    log "Creating service directories..."
    
    # Vault Agent directories
    mkdir -p /etc/vault-agent/templates
    mkdir -p /var/lib/vault-agent
    mkdir -p /var/log/vault-agent
    
    # Service directories
    mkdir -p /etc/consul.d/tls
    mkdir -p /etc/nomad.d/tls
    mkdir -p /opt/consul/data
    mkdir -p /opt/consul/logs
    mkdir -p /opt/nomad/data
    mkdir -p /opt/nomad/logs
    
    # Set ownership
    chown -R vault:vault /var/lib/vault-agent /var/log/vault-agent
    chown -R consul:consul /etc/consul.d /opt/consul
    chown -R nomad:nomad /etc/nomad.d /opt/nomad
    chown -R vault:vault /etc/consul.d/tls
    
    log "✅ Directories created"
}

# =============================================================================
# CREATE HOST VOLUMES
# =============================================================================

create_host_volumes() {
    log "Creating Nomad host volume directories..."
    
    # Create host volumes directory
    mkdir -p /opt/nomad/host_volumes
    
    # Create some common host volumes
    local volumes=(
        "/opt/nomad/host_volumes/data"
        "/opt/nomad/host_volumes/logs"
        "/opt/nomad/host_volumes/config"
        "/opt/nomad/host_volumes/netmaker-data"
    )
    
    for volume in "${volumes[@]}"; do
        mkdir -p "$volume"
        chown nomad:nomad "$volume"
        chmod 755 "$volume"
    done
    
    chown -R nomad:nomad /opt/nomad
    
    log "Host volumes created"
}

create_vault_agent_config() {
    log "Creating Vault Agent configuration..."
    
    cat > /etc/vault-agent/vault-agent.hcl << EOF
pid_file = "/var/lib/vault-agent/vault-agent.pid"

vault {
  address = "$VAULT_ADDR"
  tls_skip_verify = true
}

auto_auth {
  method "token_file" {
    config = {
      token_file_path = "/etc/vault-agent/token"
    }
  }
  
  sink "file" {
    config = {
      path = "/var/lib/vault-agent/token"
    }
  }
}

template {
  source      = "/etc/vault-agent/templates/consul-cert.tpl"
  destination = "/etc/consul.d/tls/consul.pem"
  perms       = 0644
}

template {
  source      = "/etc/vault-agent/templates/consul-key.tpl"
  destination = "/etc/consul.d/tls/consul-key.pem"
  perms       = 0600
}

template {
  source      = "/etc/vault-agent/templates/ca-cert.tpl"
  destination = "/etc/consul.d/tls/ca.pem"
  perms       = 0644
}
EOF
    
    log "✅ Vault Agent config created"
}

create_certificate_templates() {
    log "Creating certificate templates..."
    
    # CA certificate template
    cat > /etc/vault-agent/templates/ca-cert.tpl << 'EOF'
{{- with secret "pki-nodes/ca_chain" -}}
{{ .Data.certificate }}
{{- end -}}
EOF

    # Consul certificate template  
    cat > /etc/vault-agent/templates/consul-cert.tpl << EOF
{{- with secret "pki-nodes/issue/node-cert" 
    "common_name=consul.service.consul"
    "ip_sans=$NODE_IP,127.0.0.1"
    "alt_names=localhost,consul"
    "ttl=12h" -}}
{{ .Data.certificate }}
{{- end -}}
EOF

    # Private key template
    cat > /etc/vault-agent/templates/consul-key.tpl << EOF
{{- with secret "pki-nodes/issue/node-cert" 
    "common_name=consul.service.consul"
    "ip_sans=$NODE_IP,127.0.0.1"
    "alt_names=localhost,consul"
    "ttl=12h" -}}
{{ .Data.private_key }}
{{- end -}}
EOF
    
    log "✅ Certificate templates created"
}

create_vault_token_file() {
    log "Creating Vault token file..."
    
    echo "$VAULT_TOKEN" > /etc/vault-agent/token
    chown vault:vault /etc/vault-agent/token
    chmod 600 /etc/vault-agent/token
    
    log "✅ Vault token file created"
}

create_vault_agent_service() {
    log "Creating Vault Agent systemd service..."
    
    cat > /etc/systemd/system/vault-agent.service << 'EOF'
[Unit]
Description=Vault Agent
After=network.target
Wants=network.target

[Service]
Type=simple
User=vault
Group=vault
ExecStart=/usr/local/bin/vault agent -config=/etc/vault-agent/vault-agent.hcl
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    log "✅ Vault Agent service created"
}

create_consul_config() {
    log "Creating Consul configuration..."
    local bind_ip="${NETMAKER_IP}"
    
    cat > /etc/consul.d/consul.hcl << EOF
datacenter = "$DATACENTER"
data_dir = "/opt/consul"
log_level = "INFO"
node_name = "$NODE_NAME"
bind_addr = "$bind_ip"
client_addr = "0.0.0.0"
retry_join = ["$CONSUL_SERVER_IP"]
server = false

advertise_addr = "$bind_ip"
client_addr = "0.0.0.0"

connect {
  enabled = true
}

ports {
  grpc = 8502
  grpc_tls = 8503
  https = 8501
  dns = 8600
}

tls {
  defaults {
    verify_incoming = true
    verify_outgoing = true
    ca_file = "/etc/consul.d/tls/ca.pem"
    cert_file = "/etc/consul.d/tls/consul.pem"
    key_file = "/etc/consul.d/tls/consul-key.pem"
  }
  internal_rpc {
    verify_server_hostname = true
  }
}

acl = {
  enabled = true
  default_policy = "allow"
}

ui_config {
  enabled = true
}

auto_reload_config = true
EOF
    
    log "✅ Consul configuration created"
    chown consul:consul /etc/consul.d/consul.hcl
    chmod 640 /etc/consul.d/consul.hcl
    
    log "Consul configuration generated with bind address: $bind_ip"
}

create_nomad_config() {
    log "Creating Nomad configuration..."
    local bind_ip="${NETMAKER_IP}"
    
    cat > /etc/nomad.d/nomad.hcl << EOF
datacenter = "dc1"
data_dir = "/opt/nomad/data"
log_level = "INFO"
log_json = true
log_file = "/opt/nomad/logs/"
node_name = "$NODE_NAME"

server {
  enabled = false
}

client {
  enabled = true
  servers = ["$NOMAD_SERVER_IP:4647"]
  host_volume "docker-sock" {
    path = "/var/run/docker.sock"
    read_only = false
  }
}

consul {
  address = "127.0.0.1:8500"
}

acl {
  enabled = true
}
EOF
    
    log "✅ Nomad configuration created"
    chown nomad:nomad /etc/nomad.d/nomad.hcl
    chmod 640 /etc/nomad.d/nomad.hcl
    
    log "Nomad configuration generated with bind address: $bind_ip"
}

create_consul_service() {
    log "Creating Consul systemd service..."
    
    cat > /etc/systemd/system/consul.service << 'EOF'
[Unit]
Description=Consul
Documentation=https://www.consul.io/
Requires=network-online.target vault-agent.service
After=network-online.target vault-agent.service
ConditionFileNotEmpty=/etc/consul.d/consul.hcl

[Service]
Type=simple
User=consul
Group=consul
ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF
    
    log "✅ Consul service created"
}

create_nomad_service() {
    log "Creating Nomad systemd service..."
    
    cat > /etc/systemd/system/nomad.service << 'EOF'
[Unit]
Description=Nomad
Documentation=https://www.nomadproject.io/
Requires=network-online.target consul.service
After=network-online.target consul.service
ConditionFileNotEmpty=/etc/nomad.d/nomad.hcl

[Service]
Type=notify
User=root
Group=root
ExecStart=/usr/local/bin/nomad agent -config=/etc/nomad.d/nomad.hcl
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF
    
    log "✅ Nomad service created"
}

start_services() {
    log "Starting services..."
    
    systemctl daemon-reload
    
    # Start Vault Agent first
    systemctl enable vault-agent
    systemctl start vault-agent
    log "Vault Agent started"
    
    # Wait for certificates to be generated
    log "Waiting for certificates to be generated..."
    for i in {1..30}; do
        if [ -f "/etc/consul.d/tls/consul.pem" ] && [ -f "/etc/consul.d/tls/consul-key.pem" ]; then
            log "✅ Certificates generated successfully"
            break
        fi
        sleep 2
        if [ $i -eq 30 ]; then
            log "⚠️  Timeout waiting for certificates"
        fi
    done
    
    # Start Consul
    systemctl enable consul
    systemctl start consul
    log "Consul started"
    
    # Wait for Consul to be ready
    sleep 5
    
    # Start Nomad
    systemctl enable nomad
    systemctl start nomad
    log "Nomad started"
    
    log "✅ All services started"
}

check_service_status() {
    log "Checking service status..."
    
    echo "=== Vault Agent Status ==="
    systemctl status vault-agent --no-pager || true
    
    echo ""
    echo "=== Consul Status ==="
    systemctl status consul --no-pager || true
    
    echo ""
    echo "=== Nomad Status ==="
    systemctl status nomad --no-pager || true
    
    echo ""
    echo "=== Certificate Files ==="
    ls -la /etc/consul.d/tls/ || true
    
    echo ""
    echo "=== Certificate Verification ==="
    if [ -f "/etc/consul.d/tls/consul.pem" ]; then
        openssl x509 -in /etc/consul.d/tls/consul.pem -text -noout | grep -A 5 "Subject Alternative Name" || true
    fi
}

main() {
    log "🚀 Starting Vault-based node bootstrap process..."
    log "Node IP: $NODE_IP"
    log "Vault Address: $VAULT_ADDR"
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        log "❌ This script must be run as root"
        exit 1
    fi
    
    # Validate node IP
    if [[ -z "$NODE_IP" ]]; then
        log "❌ Could not determine node IP address"
        exit 1
    fi
    
    create_host_volumes
    create_service_directories
    create_vault_agent_config
    create_certificate_templates
    create_vault_token_file
    create_vault_agent_service
    create_consul_config
    create_nomad_config
    create_consul_service
    create_nomad_service
    start_services
    
    log "🎉 Node bootstrap completed successfully!"
    log "Node $NODE_IP has been configured with Vault-based certificate management"
    
    # Show final status
    check_service_status
    
    log "📋 Summary:"
    log "  • Vault Agent: Automatically manages certificates (12h renewal)"
    log "  • Consul: Configured with individual node certificate"
    log "  • Nomad: Client node ready to join cluster"
    log "  • Certificates: /etc/consul.d/tls/"
    log ""
    log "🔧 Monitoring commands:"
    log "  • Check Vault Agent: sudo journalctl -u vault-agent -f"
    log "  • Check Consul: sudo journalctl -u consul -f"
    log "  • Check Nomad: sudo journalctl -u nomad -f"
    log "  • View certificates: ls -la /etc/consul.d/tls/"
}


# =============================================================================
# CLIENT CONFIGURATION FUNCTIONS (from bin/configure_client_service_mesh.sh)
# =============================================================================

# CLIENT SERVICE MESH CONFIGURATION MODULE  
# Handles client-specific service mesh configuration
# =============================================================================

# =============================================================================
# CLIENT CONFIGURATION FUNCTION
# =============================================================================

configure_client_service_mesh() {
    log_info "Configuring client-specific service mesh settings..."
    
    # This function will be implemented to handle:
    # - Client-specific Consul configuration
    # - Client-specific Nomad configuration
    # - Client certificate provisioning
    # - Client networking setup
    
    log_info "Client service mesh configuration completed (placeholder)"
}

# The rest of the existing content from configure_client_service_mesh.sh follows below...
# This allows the existing functions to still work while providing the main entry point

# Complete Vault-Based Node Bootstrap Script
# This script sets up a new node with automatic certificate management using Vault PKI

set -e


ROLE="${ROLE:-client}"                    # server or client
NOMAD_SERVER_IP="${NOMAD_SERVER_IP:-}"    # IP of the server node
CONSUL_SERVER_IP="${CONSUL_SERVER_IP:-}"    # IP of the server node
NODE_NAME="${NODE_NAME:-$(hostname)}"     # Node name
DATACENTER="${DATACENTER:-dc1}"           # Datacenter name
ENCRYPT_KEY="${ENCRYPT_KEY:-}"            # Consul encryption key (auto-generated if empty)
NETMAKER_TOKEN="${NETMAKER_TOKEN:-}"      # Netmaker enrollment token (mandatory)
STATIC_PORT="${STATIC_PORT:-51821}"       # Netmaker static port
CONSUL_AGENT_TOKEN="${CONSUL_AGENT_TOKEN:-}"  # Consul agent token (mandatory)
VAULT_ADDR="${VAULT_ADDR:-}"
VAULT_TOKEN="${VAULT_TOKEN:-}"



# =============================================================================
# VALIDATION
# =============================================================================



log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

create_vault_agent_config() {
    log "Creating Vault Agent configuration..."
    
    cat > /etc/vault-agent/vault-agent.hcl << EOF
pid_file = "/var/lib/vault-agent/vault-agent.pid"

vault {
  address = "$VAULT_ADDR"
  tls_skip_verify = true
}

auto_auth {
  method "token_file" {
    config = {
      token_file_path = "/etc/vault-agent/token"
    }
  }
  
  sink "file" {
    config = {
      path = "/var/lib/vault-agent/token"
    }
  }
}

template {
  source      = "/etc/vault-agent/templates/consul-cert.tpl"
  destination = "/etc/consul.d/tls/consul.pem"
  perms       = 0644
}

template {
  source      = "/etc/vault-agent/templates/consul-key.tpl"
  destination = "/etc/consul.d/tls/consul-key.pem"
  perms       = 0600
}

template {
  source      = "/etc/vault-agent/templates/ca-cert.tpl"
  destination = "/etc/consul.d/tls/ca.pem"
  perms       = 0644
}
EOF
    
    log "✅ Vault Agent config created"
}

create_certificate_templates() {
    log "Creating certificate templates..."
    
    # CA certificate template
    cat > /etc/vault-agent/templates/ca-cert.tpl << 'EOF'
{{- with secret "pki-nodes/ca_chain" -}}
{{ .Data.certificate }}
{{- end -}}
EOF

    # Consul certificate template  
    cat > /etc/vault-agent/templates/consul-cert.tpl << EOF
{{- with secret "pki-nodes/issue/node-cert" 
    "common_name=consul.service.consul"
    "ip_sans=$NODE_IP,127.0.0.1"
    "alt_names=localhost,consul"
    "ttl=12h" -}}
{{ .Data.certificate }}
{{- end -}}
EOF

    # Private key template
    cat > /etc/vault-agent/templates/consul-key.tpl << EOF
{{- with secret "pki-nodes/issue/node-cert" 
    "common_name=consul.service.consul"
    "ip_sans=$NODE_IP,127.0.0.1"
    "alt_names=localhost,consul"
    "ttl=12h" -}}
{{ .Data.private_key }}
{{- end -}}
EOF
    
    log "✅ Certificate templates created"
}

create_vault_token_file() {
    log "Creating Vault token file..."
    
    echo "$VAULT_TOKEN" > /etc/vault-agent/token
    chown vault:vault /etc/vault-agent/token
    chmod 600 /etc/vault-agent/token
    
    log "✅ Vault token file created"
}

create_vault_agent_service() {
    log "Creating Vault Agent systemd service..."
    
    cat > /etc/systemd/system/vault-agent.service << 'EOF'
[Unit]
Description=Vault Agent
After=network.target
Wants=network.target

[Service]
Type=simple
User=vault
Group=vault
ExecStart=/usr/local/bin/vault agent -config=/etc/vault-agent/vault-agent.hcl
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl daemon-reload
    log "✅ Vault Agent service created"
}

create_consul_config() {
    log "Creating Consul configuration..."
    local bind_ip="${NETMAKER_IP}"
    
    cat > /etc/consul.d/consul.hcl << EOF
datacenter = "$DATACENTER"
data_dir = "/opt/consul"
log_level = "INFO"
node_name = "$NODE_NAME"
bind_addr = "$bind_ip"
client_addr = "0.0.0.0"
retry_join = ["$CONSUL_SERVER_IP"]
server = false

advertise_addr = "$bind_ip"
client_addr = "0.0.0.0"

connect {
  enabled = true
}

ports {
  grpc = 8502
  grpc_tls = 8503
  https = 8501
  dns = 8600
}

tls {
  defaults {
    verify_incoming = true
    verify_outgoing = true
    ca_file = "/etc/consul.d/tls/ca.pem"
    cert_file = "/etc/consul.d/tls/consul.pem"
    key_file = "/etc/consul.d/tls/consul-key.pem"
  }
  internal_rpc {
    verify_server_hostname = true
  }
}

acl = {
  enabled = true
  default_policy = "allow"
}

ui_config {
  enabled = true
}

auto_reload_config = true
EOF
    
    log "✅ Consul configuration created"
    chown consul:consul /etc/consul.d/consul.hcl
    chmod 640 /etc/consul.d/consul.hcl
    
    log "Consul configuration generated with bind address: $bind_ip"
}

create_nomad_config() {
    log "Creating Nomad configuration..."
    local bind_ip="${NETMAKER_IP}"
    
    cat > /etc/nomad.d/nomad.hcl << EOF
datacenter = "dc1"
data_dir = "/opt/nomad/data"
log_level = "INFO"
log_json = true
log_file = "/opt/nomad/logs/"
node_name = "$NODE_NAME"

server {
  enabled = false
}

client {
  enabled = true
  servers = ["$NOMAD_SERVER_IP:4647"]
  host_volume "docker-sock" {
    path = "/var/run/docker.sock"
    read_only = false
  }
}

consul {
  address = "127.0.0.1:8500"
}

acl {
  enabled = true
}
EOF
    
    log "✅ Nomad configuration created"
    chown nomad:nomad /etc/nomad.d/nomad.hcl
    chmod 640 /etc/nomad.d/nomad.hcl
    
    log "Nomad configuration generated with bind address: $bind_ip"
}

create_consul_service() {
    log "Creating Consul systemd service..."
    
    cat > /etc/systemd/system/consul.service << 'EOF'
[Unit]
Description=Consul
Documentation=https://www.consul.io/
Requires=network-online.target vault-agent.service
After=network-online.target vault-agent.service
ConditionFileNotEmpty=/etc/consul.d/consul.hcl

[Service]
Type=simple
User=consul
Group=consul
ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF
    
    log "✅ Consul service created"
}

create_nomad_service() {
    log "Creating Nomad systemd service..."
    
    cat > /etc/systemd/system/nomad.service << 'EOF'
[Unit]
Description=Nomad
Documentation=https://www.nomadproject.io/
Requires=network-online.target consul.service
After=network-online.target consul.service
ConditionFileNotEmpty=/etc/nomad.d/nomad.hcl

[Service]
Type=notify
User=root
Group=root
ExecStart=/usr/local/bin/nomad agent -config=/etc/nomad.d/nomad.hcl
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
EOF
    
    log "✅ Nomad service created"
}

check_service_status() {
    log "Checking service status..."
    
    echo "=== Vault Agent Status ==="
    systemctl status vault-agent --no-pager || true
    
    echo ""
    echo "=== Consul Status ==="
    systemctl status consul --no-pager || true
    
    echo ""
    echo "=== Nomad Status ==="
    systemctl status nomad --no-pager || true
    
    echo ""
    echo "=== Certificate Files ==="
    ls -la /etc/consul.d/tls/ || true
    
    echo ""
    echo "=== Certificate Verification ==="
    if [ -f "/etc/consul.d/tls/consul.pem" ]; then
        openssl x509 -in /etc/consul.d/tls/consul.pem -text -noout | grep -A 5 "Subject Alternative Name" || true
    fi
}

main() {
    log "🚀 Starting Vault-based node bootstrap process..."
    log "Node IP: $NODE_IP"
    log "Vault Address: $VAULT_ADDR"
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        log "❌ This script must be run as root"
        exit 1
    fi
    
    # Validate node IP
    if [[ -z "$NODE_IP" ]]; then
        log "❌ Could not determine node IP address"
        exit 1
    fi
    
    create_vault_agent_config
    create_certificate_templates
    create_vault_token_file
    create_vault_agent_service
    create_consul_config
    create_nomad_config
    create_consul_service
    create_nomad_service

    log "🎉 Node configuration completed successfully!"
    log "Node $NODE_IP has been configured with Vault-based certificate management"
    
    # Show final status
    check_service_status
    
    log "📋 Summary:"
    log "  • Vault Agent: Automatically manages certificates (12h renewal)"
    log "  • Consul: Configured with individual node certificate"
    log "  • Nomad: Client node ready to join cluster"
    log "  • Certificates: /etc/consul.d/tls/"
    log ""
    log "🔧 Monitoring commands:"
    log "  • Check Vault Agent: sudo journalctl -u vault-agent -f"
    log "  • Check Consul: sudo journalctl -u consul -f"
    log "  • Check Nomad: sudo journalctl -u nomad -f"
    log "  • View certificates: ls -la /etc/consul.d/tls/"
}


# =============================================================================
# MAIN EXECUTION LOGIC (from bin/cluster-forge.sh)
# =============================================================================

# CLUSTER FORGE - Main Entry Point
# Nomad/Consul/Netmaker Cluster Setup Script
# =============================================================================

# If bundling, the bundler will inline the content here.
# If not bundling, make sure lib/logging.sh exists.

# =============================================================================
# CONFIGURATION VARIABLES
# =============================================================================

ROLE="${ROLE:-client}"                    # server or client
NOMAD_SERVER_IP="${NOMAD_SERVER_IP:-}"    # IP of the server node
CONSUL_SERVER_IP="${CONSUL_SERVER_IP:-}"  # IP of the server node
NODE_NAME="${NODE_NAME:-$(hostname)}"     # Node name
DATACENTER="${DATACENTER:-dc1}"           # Datacenter name
ENCRYPT_KEY="${ENCRYPT_KEY:-}"            # Consul encryption key (auto-generated if empty)
NETMAKER_TOKEN="${NETMAKER_TOKEN:-}"      # Netmaker enrollment token (mandatory)
STATIC_PORT="${STATIC_PORT:-51821}"       # Netmaker static port
CONSUL_AGENT_TOKEN="${CONSUL_AGENT_TOKEN:-}"  # Consul agent token (mandatory)
VAULT_ADDR="${VAULT_ADDR:-}"
VAULT_TOKEN="${VAULT_TOKEN:-}"

# =============================================================================
# HELP AND USAGE
# =============================================================================

show_help() {
    cat << EOF
Cluster Forge - Nomad/Consul/Netmaker Cluster Setup Script

USAGE:
    $0 [OPTIONS]

DESCRIPTION:
    Sets up a Nomad/Consul cluster node with Netmaker networking.
    All configuration is done via environment variables.

REQUIRED ENVIRONMENT VARIABLES:
    NETMAKER_TOKEN        Netmaker enrollment token
    NOMAD_SERVER_IP       IP address of the Nomad server node
    CONSUL_SERVER_IP      IP address of the Consul server node
    CONSUL_AGENT_TOKEN    Consul agent token for authentication
    VAULT_ADDR           Vault server address
    VAULT_TOKEN          Vault authentication token

OPTIONAL ENVIRONMENT VARIABLES:
    ROLE                 Node role: 'server' or 'client' (default: client)
    NODE_NAME           Node name (default: hostname)
    DATACENTER          Datacenter name (default: dc1)
    ENCRYPT_KEY         Consul encryption key (auto-generated if empty)
    STATIC_PORT         Netmaker static port (default: 51821)

OPTIONS:
    -h, --help          Show this help message
    -v, --version       Show version information
    --validate-only     Only validate environment variables, don't run setup
    --dry-run          Show what would be done without making changes

EXAMPLES:
    # Server node setup
    sudo NETMAKER_TOKEN="xyz123" ROLE=server NOMAD_SERVER_IP=10.0.1.10 \\
         CONSUL_SERVER_IP=10.0.1.10 CONSUL_AGENT_TOKEN="abc123" \\
         VAULT_ADDR="https://vault.example.com:8200" VAULT_TOKEN="def456" \\
         $0

    # Client node setup
    sudo NETMAKER_TOKEN="xyz123" ROLE=client NOMAD_SERVER_IP=10.0.1.10 \\
         CONSUL_SERVER_IP=10.0.1.10 CONSUL_AGENT_TOKEN="abc123" \\
         VAULT_ADDR="https://vault.example.com:8200" VAULT_TOKEN="def456" \\
         $0

    # Validate configuration only
    NETMAKER_TOKEN="xyz123" NOMAD_SERVER_IP=10.0.1.10 \\
    CONSUL_SERVER_IP=10.0.1.10 CONSUL_AGENT_TOKEN="abc123" \\
    VAULT_ADDR="https://vault.example.com:8200" VAULT_TOKEN="def456" \\
    $0 --validate-only

EOF
}

show_version() {
    echo "Cluster Forge v1.0.0"
    echo "Nomad/Consul/Netmaker cluster setup tool"
}

# =============================================================================
# ARGUMENT PARSING
# =============================================================================

VALIDATE_ONLY=false
DRY_RUN=false

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            --validate-only)
                VALIDATE_ONLY=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                echo "Use --help for usage information"
                exit 1
                ;;
        esac
    done
}

# =============================================================================
# VALIDATION
# =============================================================================

validate_input() {
    local errors=0
    
    log_info "Validating configuration..."
    
    # Check if running as root (unless validate-only or dry-run)
    if [[ "$VALIDATE_ONLY" == false && "$DRY_RUN" == false && $EUID -ne 0 ]]; then
        log_error "This script must be run as root for actual deployment"
        ((errors++))
    fi
    
    # Validate role
    if [[ "$ROLE" != "server" && "$ROLE" != "client" ]]; then
        log_error "ROLE must be 'server' or 'client', got: '$ROLE'"
        ((errors++))
    fi
    
    # Validate required IPs
    if [[ -z "$NOMAD_SERVER_IP" ]]; then
        log_error "NOMAD_SERVER_IP must be provided"
        ((errors++))
    elif ! [[ "$NOMAD_SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        log_error "NOMAD_SERVER_IP must be a valid IP address, got: '$NOMAD_SERVER_IP'"
        ((errors++))
    fi

    if [[ -z "$CONSUL_SERVER_IP" ]]; then
        log_error "CONSUL_SERVER_IP must be provided"
        ((errors++))
    elif ! [[ "$CONSUL_SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        log_error "CONSUL_SERVER_IP must be a valid IP address, got: '$CONSUL_SERVER_IP'"
        ((errors++))
    fi

    # Validate required tokens
    if [[ -z "$NETMAKER_TOKEN" ]]; then
        log_error "NETMAKER_TOKEN is mandatory. Please provide the Netmaker enrollment token."
        ((errors++))
    fi

    if [[ -z "$CONSUL_AGENT_TOKEN" ]]; then
        log_error "CONSUL_AGENT_TOKEN is mandatory. Please provide the Consul agent token."
        ((errors++))
    fi
    
    # Validate Vault configuration
    if [[ -z "$VAULT_ADDR" ]]; then
        log_error "VAULT_ADDR is mandatory. Please provide the Vault address."
        ((errors++))
    fi

    if [[ -z "$VAULT_TOKEN" ]]; then
        log_error "VAULT_TOKEN is mandatory. Please provide the Vault token."
        ((errors++))
    fi
    
    # Validate network ports
    if ! [[ "$STATIC_PORT" =~ ^[0-9]+$ ]] || [[ "$STATIC_PORT" -lt 1024 || "$STATIC_PORT" -gt 65535 ]]; then
        log_error "STATIC_PORT must be a valid port number between 1024-65535, got: '$STATIC_PORT'"
        ((errors++))
    fi
    
    if [[ $errors -eq 0 ]]; then
        log_info "✓ Configuration validation passed"
        log_info "  • Role: $ROLE"
        log_info "  • Node Name: $NODE_NAME"
        log_info "  • Datacenter: $DATACENTER"
        log_info "  • Nomad Server: $NOMAD_SERVER_IP"
        log_info "  • Consul Server: $CONSUL_SERVER_IP"
        log_info "  • Vault Address: $VAULT_ADDR"
        log_info "  • Static Port: $STATIC_PORT"
        return 0
    else
        log_error "Configuration validation failed with $errors errors"
        return 1
    fi
}

# =============================================================================
# MAIN EXECUTION FUNCTIONS
# =============================================================================

# Source additional modules when not bundled

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    # Parse command line arguments
    parse_arguments "$@"
    
    log_info "Starting Cluster Forge - Nomad/Consul/Netmaker setup..."
    log_info "Role: $ROLE"
    log_info "Server IP: $NOMAD_SERVER_IP"
    log_info "Node Name: $NODE_NAME"
    log_info "Netmaker Token: [REDACTED]"
    
    # Validate configuration
    if ! validate_input; then
        exit 1
    fi
    
    # If only validation requested, exit here
    if [[ "$VALIDATE_ONLY" == true ]]; then
        log_info "Validation completed successfully. Exiting."
        exit 0
    fi
    
    # Load additional modules
    
    # Show what would be done in dry-run mode
    if [[ "$DRY_RUN" == true ]]; then
        log_info "DRY RUN MODE - Would execute the following steps:"
        log_info "1. Prepare system (update packages, create users)"
        log_info "2. Setup Netmaker client"
        log_info "3. Install Docker"
        log_info "4. Configure DNS (disable systemd-resolved, setup dnsmasq)"
        log_info "5. Configure firewall"
        log_info "6. Install HashiCorp tools (Nomad, Consul, Vault)"
        log_info "7. Setup service mesh configuration"
        log_info "8. Configure client-specific settings"
        log_info "9. Start and validate services"
        log_info ""
        log_info "No actual changes would be made. Remove --dry-run to proceed."
        exit 0
    fi
    
    # Execute the main setup process
    log_info "Beginning cluster setup process..."
    
    # Core system setup (from main.sh functionality)
    prepare_system
    setup_netmaker
    install_docker
    disable_systemd_resolved
    configure_dnsmasq
    reload_dns_services
    configure_firewall
    install_hashicorp_tools
    
    # Service mesh setup (from setup_service_mesh.sh)
    setup_service_mesh
    
    # Client-specific configuration (from configure_client_service_mesh.sh)
    configure_client_service_mesh
    
    # Start services and validate
    start_services
    
    if validate_installation; then
        local main_ip=$(ip route get 8.8.8.8 | grep -oP 'src \K\S+' | head -1)
        
        log_info "============================================"
        log_info "🎉 Cluster Forge completed successfully!"
        log_info "============================================"
        log_info "Main IP: $main_ip"
        log_info "Netmaker IP: ${NETMAKER_IP:-N/A}"
        log_info ""
        log_info "🌐 Web Interfaces:"
        log_info "  • Consul UI: http://${NETMAKER_IP:-$main_ip}:8500"
        log_info "  • Nomad UI: http://${NETMAKER_IP:-$main_ip}:4646"
        log_info ""
        log_info "📁 Configuration files:"
        log_info "  • Consul: /etc/consul.d/consul.hcl"
        log_info "  • Nomad: /etc/nomad.d/nomad.hcl"
        log_info "  • dnsmasq: /etc/dnsmasq.d/10-consul"
        log_info ""
        log_info "🔧 Useful commands:"
        log_info "  • Check status: systemctl status consul nomad dnsmasq"
        log_info "  • View logs: journalctl -f -u consul -u nomad"
        log_info "  • Consul members: consul members"
        log_info "  • Nomad nodes: nomad node status"
        log_info "  • Netmaker status: netclient list"
        log_info "============================================"
    else
        log_error "Cluster Forge setup failed. Check the logs above for details."
        exit 1
    fi
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
